main:
  declare possible_characters = array of char from argv[1]
  declare max_character = integer(argv[2])
  declare thread_count = integer(argv[3])
  read n zip. files on array files of size file_count
  declare passwords as array of char arrays of size file_count
  passwords[i] is array of char of size max_character-1

  create_threads()
  print files, passwords
end

init:
  for (zip_number = 0, until file_count) do
    break_password()
  end
end init

break_password:
  declare possible_password as array of char of size max_character-1
  for (i = 1, until max_character) do
    for (j = 0 until possible_characters_count elevetad to i) do
      possible_password = change_base(possible_characters_count, i)
      if (zip_open) do
        passwords = possible_password
      end
    end
  end for
end break_password

create_threads:
  declare private_data as array of private_data_t of size thread_count
  copy_files(shared_data)
  for (thread_number = 0, until thread_count) do
    initialize members of private_data
    create_thread(init, private_data)
  end for
end create_threads

copy_files:
  make a temporary directory
  for (zip_number = 0, until file_count) do
    for (thread_number = 0, until thread_count) do
      make a temporary copy of zip file
    end
  end
end copy_files

divide_workspace:
  // assign the start of workspace to each thread
  start_work(private_data, workspace)
  // assign the finish of workspace to each thread
  finish_work(private_data, workspace)
end divide_workspace

start_work:
  start = private_data.thread_id * (workspace / thread_count) 
    + min(private_data.thread_id, (workspace % thread_count))
end start_work

finish_work:
  finish = start_work(private_data.id+1, workspace)
end finish_work