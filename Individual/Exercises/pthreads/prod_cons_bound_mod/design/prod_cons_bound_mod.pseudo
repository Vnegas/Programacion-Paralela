procedure main(argc, argv[]):
  if argc = 7 then
    shared buffer_capacity = integer(argv[1])
    shared buffer as array of buffer_capacity of float
    shared rounds = integer(argv[2])
    shared producer_min_delay = integer(argv[3])
    shared producer_max_delay = integer(argv[4])
    shared consumer_min_delay = integer(argv[5])
    shared consumer_max_delay = integer(argv[6])

    shared sem_consume = create_semaphor(buffer_capacity)
    shared sem_produce = create_semaphor(0)

    create_threads(1, produce)
    create_threads(1, consume)
  end if
end procedure

procedure produce:
  declare count = 0
  for (round = 1 until rounds) do
    for (index = 0 until buffer_capacity) do
      wait(sem_produce)
      delay(random_between(producer_min_delay, producer_max_delay))
      buffer[index] = ++count
      print("Produced ", buffer[index])
			signal(sem_consume)
    end for
  end for
end procedure

procedure consume:
  for (round = 1 until rounds) do
    for (index = 0 until buffer_capacity) do
			wait(sem_consume)
      value = buffer[index]
      delay(random_between(consumer_min_delay, consumer_max_delay))
      print("Consumed ", value)
			signal(sem_produce)
    end for
  end for
end procedure

function random_between(min, max):
  return min + rand() % (max - min)
end function
