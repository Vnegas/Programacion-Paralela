main:
  declare simulation as object of simulation_t
  simulation_run(simulation)
  destroy_simulation(simulation)
end

simulation_run:
  analyze_arguments(simulation)
  create_consumers_producers(simulation)
  for (i = 0, until files_count) do
    print files[i], passwords[i]
  end for
end simulation_run

analyze_arguments:
  declare simulation.possible_characters = array of char from argv[1]
  declare simulation.max_character = integer(argv[2])
  read n zip. files on array simulation.files of size file_count
  declare simulation.passwords as array of char arrays of size file_count
  simulation.passwords[i] is array of char of size max_character-1
end analyze_arguments

create_consumers_producers:
  create private_data as array of private_data_t of size consumer_count
  create_thread(produce, simulation)
  for (i = 0, until consumer_count) do
    create_thread(consume, private_data)
  end for
end create_consumers_producers

produce:
  for (i = 1, until max_character) do
    declare possible_password as array of char of size i
    for (j = 0 until possible_characters_count elevetad to i) do
      possible_password = change_base(possible_characters_count, i)
      enqueue(possible_password)
    end for
  end for
end produce

consume:
  while (true) do
    dequeue(private_data.password)
    for (zip_number = 0, until file_count) do
      if (procces_file) do
        passwords = private_data.password
      end
    end for
  end while
end consume
